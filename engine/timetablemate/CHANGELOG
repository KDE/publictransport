
Changelog of timetablemate

0.3 - Beta 1
- New GUI, more KDevelop like, with dock widgets at the left, right and bottom
- New Icon, integrating the publictransport-stop-icon into the kdevelop-icon
- Multiple projects per window, using a new ProjectModel and a ProjectsDockWidget. One project is always the active one. Most docks show content for the active project and actions get connected to the active project
- Context menus for projects in the projects dock widget and for tabs
- Add an integrated debugger with many common features (eg. stop over/into/out, breakpoints with conditions, view variable values etc.) and associated docks/models for variables, breakpoints and backtraces
- Add a project dashboard tab, using QML
- Add a console dock widget, provides some useful commands, can control the debugger, run code in the script context (even if it is currently running, ie. interrupted), etc.
- Add an output dock widget, shows output generated by the script (eg. by helper.error() calls) and statistics after a script run
- Add test dock widget, which shows test results
- Move web inspector into an own dock
- Add a network monitor dock widget, which shows requests created / replies received in the web tab of the currently active project (useful to find out what data to send when timetable data gets retrieved using POST)
- Menus of the kate part are now separated from own menus like in KDevelop (copied some lines of code)
- Shortcut clashes with the kate part are now solved by using an own katepartui.rc, which removes shortcuts from actions in the kate part that are also used by timetablemate (the same way KDevelop does it)
- Opened projects and tabs are remembered when TimetabeMate gets started again
- Add a small tool, that automatically generates code that adds code completion data for TimetableMate. Information about Methods is retrieved using QMetaObject, while comments are retrieved by parsing the source file (including some formatting conversions, eg. "@verbatimTest@endverbatim" gets converted to "<pre>Test</pre>").
- The same tool also generates HTML documentation about the scripting possibilities, shown in a documentation dock
- Fix JavaScript parser (hangs, crashes)
- Add OCS username to aboutdata, replace "(c)" with "Â©"

0.2.3
- Cleanup, update to new version of libpublictransporthelper (namespace Timetable)
- Fix for missing KWebKitPart include file, it now uses KWebView directly

0.2.2
- Updated syntax completion/checking to new features in the data engine (version 0.10).
- After a test run of the script debug output from the script is shown (using helper.error() from the script).
- Added a GUI for changelogs (using AbstractDynamicWidgetContainer from the publictransporthelper library).
- More crash fixes with bad/empty javascript code.

0.2.1
- Fixed crashes in the javascript parser when parsing incorrect files and hitting an unexpected EOF at some points.
- Added possibility to start the app with url arguments to be opened.

0.2
- New parser for java script, gives some error messages with line numbers and columns, like "unclosed string", "function definition missing", "timetable info string is invalid".
- Errors from the new parser are highlighted in the document (KTextEditor::MarkInterface).
- Errors from the new parser are used for the "Check" action.
- Added tooltips for global parser functions, timetable info strings and some function calls in the script source tab, using KTextEditor::TextHintInterface and the java script parser.
- The script tab is now disabled on startup when no accessor is loaded and no script is specified in the accessor tab.
- The "Show Plasma Preview" button in the preview tab is now correctly embedded into the graphics scene (and centered).
- Creating a new script for the current accessor now doesn't try to save to ".js" if the accessor wasn't opened before (only saved).
- The accessor source tab is now synced with the accessor tab on startup (previously is was empty on startup).
- Now using KAuth to install accessors globally.
- Now showing the current line and column in the script tab.
- Localization of the name and description fields is now possible using TimetableMate.
- The "Use City Value" field now gets automatically set/unset if the raw departure or journey URL contains a placeholder for the city.
- Added support for city name replacements and "onlyUsePredefinedCities".
- The plasma previewer now automatically opens the configuration dialog of the applet with the currently opened accessor selected.

0.1
- Initial version of TimetableMate
- A little IDE to create/edit/check timetable accessors, ie. scripted publictransport data engine plugins. If you want to add support for a new service provider it's a handy tool. It's KParts based and uses the KatePart for editing scripts, with syntax completion for functions/objects specific to the data engine (with documentation, the parser functions have templates). It can also fetch data from the service provider and run the script for testing, with output about errors/suggestions. URLs can be checked (and script output verified) with the integrated KWebKitPart. A Plasma previewer is also integrated to see how the accessor works in "real life".
