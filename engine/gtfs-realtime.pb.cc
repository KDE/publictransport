// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gtfs-realtime.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transit_realtime {

namespace {

const ::google::protobuf::Descriptor* FeedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeedHeader_Incrementality_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeedEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_StopTimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_StopTimeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripUpdate_StopTimeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripUpdate_StopTimeUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehiclePosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehiclePosition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Alert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Alert_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Alert_Cause_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Alert_Effect_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TimeRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VehicleDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VehicleDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntitySelector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitySelector_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslatedString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslatedString_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslatedString_Translation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslatedString_Translation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gtfs_2drealtime_2eproto() {
  protobuf_AddDesc_gtfs_2drealtime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gtfs-realtime.proto");
  GOOGLE_CHECK(file != NULL);
  FeedMessage_descriptor_ = file->message_type(0);
  static const int FeedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, entity_),
  };
  FeedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedMessage_descriptor_,
      FeedMessage::default_instance_,
      FeedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedMessage));
  FeedHeader_descriptor_ = file->message_type(1);
  static const int FeedHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, gtfs_realtime_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, incrementality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, timestamp_),
  };
  FeedHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedHeader_descriptor_,
      FeedHeader::default_instance_,
      FeedHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedHeader));
  FeedHeader_Incrementality_descriptor_ = FeedHeader_descriptor_->enum_type(0);
  FeedEntity_descriptor_ = file->message_type(2);
  static const int FeedEntity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, is_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, trip_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, alert_),
  };
  FeedEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedEntity_descriptor_,
      FeedEntity::default_instance_,
      FeedEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedEntity));
  TripUpdate_descriptor_ = file->message_type(3);
  static const int TripUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, stop_time_update_),
  };
  TripUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripUpdate_descriptor_,
      TripUpdate::default_instance_,
      TripUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripUpdate));
  TripUpdate_StopTimeEvent_descriptor_ = TripUpdate_descriptor_->nested_type(0);
  static const int TripUpdate_StopTimeEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, uncertainty_),
  };
  TripUpdate_StopTimeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripUpdate_StopTimeEvent_descriptor_,
      TripUpdate_StopTimeEvent::default_instance_,
      TripUpdate_StopTimeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripUpdate_StopTimeEvent));
  TripUpdate_StopTimeUpdate_descriptor_ = TripUpdate_descriptor_->nested_type(1);
  static const int TripUpdate_StopTimeUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, stop_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, stop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, arrival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, departure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, schedule_relationship_),
  };
  TripUpdate_StopTimeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripUpdate_StopTimeUpdate_descriptor_,
      TripUpdate_StopTimeUpdate::default_instance_,
      TripUpdate_StopTimeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripUpdate_StopTimeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripUpdate_StopTimeUpdate));
  TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_ = TripUpdate_StopTimeUpdate_descriptor_->enum_type(0);
  VehiclePosition_descriptor_ = file->message_type(4);
  static const int VehiclePosition_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, vehicle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, current_stop_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, stop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, current_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, congestion_level_),
  };
  VehiclePosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehiclePosition_descriptor_,
      VehiclePosition::default_instance_,
      VehiclePosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehiclePosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehiclePosition));
  VehiclePosition_VehicleStopStatus_descriptor_ = VehiclePosition_descriptor_->enum_type(0);
  VehiclePosition_CongestionLevel_descriptor_ = VehiclePosition_descriptor_->enum_type(1);
  Alert_descriptor_ = file->message_type(5);
  static const int Alert_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, active_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, informed_entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, header_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, description_text_),
  };
  Alert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Alert_descriptor_,
      Alert::default_instance_,
      Alert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Alert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Alert));
  Alert_Cause_descriptor_ = Alert_descriptor_->enum_type(0);
  Alert_Effect_descriptor_ = Alert_descriptor_->enum_type(1);
  TimeRange_descriptor_ = file->message_type(6);
  static const int TimeRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, end_),
  };
  TimeRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeRange_descriptor_,
      TimeRange::default_instance_,
      TimeRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeRange));
  Position_descriptor_ = file->message_type(7);
  static const int Position_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, odometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, speed_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  TripDescriptor_descriptor_ = file->message_type(8);
  static const int TripDescriptor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, trip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, schedule_relationship_),
  };
  TripDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripDescriptor_descriptor_,
      TripDescriptor::default_instance_,
      TripDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripDescriptor));
  TripDescriptor_ScheduleRelationship_descriptor_ = TripDescriptor_descriptor_->enum_type(0);
  VehicleDescriptor_descriptor_ = file->message_type(9);
  static const int VehicleDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, license_plate_),
  };
  VehicleDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VehicleDescriptor_descriptor_,
      VehicleDescriptor::default_instance_,
      VehicleDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VehicleDescriptor));
  EntitySelector_descriptor_ = file->message_type(10);
  static const int EntitySelector_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, agency_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, route_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, trip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, stop_id_),
  };
  EntitySelector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntitySelector_descriptor_,
      EntitySelector::default_instance_,
      EntitySelector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySelector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntitySelector));
  TranslatedString_descriptor_ = file->message_type(11);
  static const int TranslatedString_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString, translation_),
  };
  TranslatedString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslatedString_descriptor_,
      TranslatedString::default_instance_,
      TranslatedString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslatedString));
  TranslatedString_Translation_descriptor_ = TranslatedString_descriptor_->nested_type(0);
  static const int TranslatedString_Translation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, language_),
  };
  TranslatedString_Translation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslatedString_Translation_descriptor_,
      TranslatedString_Translation::default_instance_,
      TranslatedString_Translation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslatedString_Translation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslatedString_Translation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gtfs_2drealtime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedMessage_descriptor_, &FeedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedHeader_descriptor_, &FeedHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedEntity_descriptor_, &FeedEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripUpdate_descriptor_, &TripUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripUpdate_StopTimeEvent_descriptor_, &TripUpdate_StopTimeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripUpdate_StopTimeUpdate_descriptor_, &TripUpdate_StopTimeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehiclePosition_descriptor_, &VehiclePosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Alert_descriptor_, &Alert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeRange_descriptor_, &TimeRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripDescriptor_descriptor_, &TripDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VehicleDescriptor_descriptor_, &VehicleDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntitySelector_descriptor_, &EntitySelector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslatedString_descriptor_, &TranslatedString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslatedString_Translation_descriptor_, &TranslatedString_Translation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gtfs_2drealtime_2eproto() {
  delete FeedMessage::default_instance_;
  delete FeedMessage_reflection_;
  delete FeedHeader::default_instance_;
  delete FeedHeader_reflection_;
  delete FeedEntity::default_instance_;
  delete FeedEntity_reflection_;
  delete TripUpdate::default_instance_;
  delete TripUpdate_reflection_;
  delete TripUpdate_StopTimeEvent::default_instance_;
  delete TripUpdate_StopTimeEvent_reflection_;
  delete TripUpdate_StopTimeUpdate::default_instance_;
  delete TripUpdate_StopTimeUpdate_reflection_;
  delete VehiclePosition::default_instance_;
  delete VehiclePosition_reflection_;
  delete Alert::default_instance_;
  delete Alert_reflection_;
  delete TimeRange::default_instance_;
  delete TimeRange_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete TripDescriptor::default_instance_;
  delete TripDescriptor_reflection_;
  delete VehicleDescriptor::default_instance_;
  delete VehicleDescriptor_reflection_;
  delete EntitySelector::default_instance_;
  delete EntitySelector_reflection_;
  delete TranslatedString::default_instance_;
  delete TranslatedString_reflection_;
  delete TranslatedString_Translation::default_instance_;
  delete TranslatedString_Translation_reflection_;
}

void protobuf_AddDesc_gtfs_2drealtime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023gtfs-realtime.proto\022\020transit_realtime\""
    "i\n\013FeedMessage\022,\n\006header\030\001 \002(\0132\034.transit"
    "_realtime.FeedHeader\022,\n\006entity\030\002 \003(\0132\034.t"
    "ransit_realtime.FeedEntity\"\307\001\n\nFeedHeade"
    "r\022\035\n\025gtfs_realtime_version\030\001 \002(\t\022Q\n\016incr"
    "ementality\030\002 \001(\0162+.transit_realtime.Feed"
    "Header.Incrementality:\014FULL_DATASET\022\021\n\tt"
    "imestamp\030\003 \001(\004\"4\n\016Incrementality\022\020\n\014FULL"
    "_DATASET\020\000\022\020\n\014DIFFERENTIAL\020\001\"\302\001\n\nFeedEnt"
    "ity\022\n\n\002id\030\001 \002(\t\022\031\n\nis_deleted\030\002 \001(\010:\005fal"
    "se\0221\n\013trip_update\030\003 \001(\0132\034.transit_realti"
    "me.TripUpdate\0222\n\007vehicle\030\004 \001(\0132!.transit"
    "_realtime.VehiclePosition\022&\n\005alert\030\005 \001(\013"
    "2\027.transit_realtime.Alert\"\340\004\n\nTripUpdate"
    "\022.\n\004trip\030\001 \002(\0132 .transit_realtime.TripDe"
    "scriptor\0224\n\007vehicle\030\003 \001(\0132#.transit_real"
    "time.VehicleDescriptor\022E\n\020stop_time_upda"
    "te\030\002 \003(\0132+.transit_realtime.TripUpdate.S"
    "topTimeUpdate\032A\n\rStopTimeEvent\022\r\n\005delay\030"
    "\001 \001(\005\022\014\n\004time\030\002 \001(\003\022\023\n\013uncertainty\030\003 \001(\005"
    "\032\341\002\n\016StopTimeUpdate\022\025\n\rstop_sequence\030\001 \001"
    "(\r\022\017\n\007stop_id\030\004 \001(\t\022;\n\007arrival\030\002 \001(\0132*.t"
    "ransit_realtime.TripUpdate.StopTimeEvent"
    "\022=\n\tdeparture\030\003 \001(\0132*.transit_realtime.T"
    "ripUpdate.StopTimeEvent\022j\n\025schedule_rela"
    "tionship\030\005 \001(\0162@.transit_realtime.TripUp"
    "date.StopTimeUpdate.ScheduleRelationship"
    ":\tSCHEDULED\"?\n\024ScheduleRelationship\022\r\n\tS"
    "CHEDULED\020\000\022\013\n\007SKIPPED\020\001\022\013\n\007NO_DATA\020\002\"\331\004\n"
    "\017VehiclePosition\022.\n\004trip\030\001 \001(\0132 .transit"
    "_realtime.TripDescriptor\0224\n\007vehicle\030\010 \001("
    "\0132#.transit_realtime.VehicleDescriptor\022,"
    "\n\010position\030\002 \001(\0132\032.transit_realtime.Posi"
    "tion\022\035\n\025current_stop_sequence\030\003 \001(\r\022\017\n\007s"
    "top_id\030\007 \001(\t\022Z\n\016current_status\030\004 \001(\01623.t"
    "ransit_realtime.VehiclePosition.VehicleS"
    "topStatus:\rIN_TRANSIT_TO\022\021\n\ttimestamp\030\005 "
    "\001(\004\022K\n\020congestion_level\030\006 \001(\01621.transit_"
    "realtime.VehiclePosition.CongestionLevel"
    "\"G\n\021VehicleStopStatus\022\017\n\013INCOMING_AT\020\000\022\016"
    "\n\nSTOPPED_AT\020\001\022\021\n\rIN_TRANSIT_TO\020\002\"}\n\017Con"
    "gestionLevel\022\034\n\030UNKNOWN_CONGESTION_LEVEL"
    "\020\000\022\024\n\020RUNNING_SMOOTHLY\020\001\022\017\n\013STOP_AND_GO\020"
    "\002\022\016\n\nCONGESTION\020\003\022\025\n\021SEVERE_CONGESTION\020\004"
    "\"\256\006\n\005Alert\0222\n\ractive_period\030\001 \003(\0132\033.tran"
    "sit_realtime.TimeRange\0229\n\017informed_entit"
    "y\030\005 \003(\0132 .transit_realtime.EntitySelecto"
    "r\022;\n\005cause\030\006 \001(\0162\035.transit_realtime.Aler"
    "t.Cause:\rUNKNOWN_CAUSE\022>\n\006effect\030\007 \001(\0162\036"
    ".transit_realtime.Alert.Effect:\016UNKNOWN_"
    "EFFECT\022/\n\003url\030\010 \001(\0132\".transit_realtime.T"
    "ranslatedString\0227\n\013header_text\030\n \001(\0132\".t"
    "ransit_realtime.TranslatedString\022<\n\020desc"
    "ription_text\030\013 \001(\0132\".transit_realtime.Tr"
    "anslatedString\"\330\001\n\005Cause\022\021\n\rUNKNOWN_CAUS"
    "E\020\001\022\017\n\013OTHER_CAUSE\020\002\022\025\n\021TECHNICAL_PROBLE"
    "M\020\003\022\n\n\006STRIKE\020\004\022\021\n\rDEMONSTRATION\020\005\022\014\n\010AC"
    "CIDENT\020\006\022\013\n\007HOLIDAY\020\007\022\013\n\007WEATHER\020\010\022\017\n\013MA"
    "INTENANCE\020\t\022\020\n\014CONSTRUCTION\020\n\022\023\n\017POLICE_"
    "ACTIVITY\020\013\022\025\n\021MEDICAL_EMERGENCY\020\014\"\265\001\n\006Ef"
    "fect\022\016\n\nNO_SERVICE\020\001\022\023\n\017REDUCED_SERVICE\020"
    "\002\022\026\n\022SIGNIFICANT_DELAYS\020\003\022\n\n\006DETOUR\020\004\022\026\n"
    "\022ADDITIONAL_SERVICE\020\005\022\024\n\020MODIFIED_SERVIC"
    "E\020\006\022\020\n\014OTHER_EFFECT\020\007\022\022\n\016UNKNOWN_EFFECT\020"
    "\010\022\016\n\nSTOP_MOVED\020\t\"\'\n\tTimeRange\022\r\n\005start\030"
    "\001 \001(\004\022\013\n\003end\030\002 \001(\004\"a\n\010Position\022\020\n\010latitu"
    "de\030\001 \002(\002\022\021\n\tlongitude\030\002 \002(\002\022\017\n\007bearing\030\003"
    " \001(\002\022\020\n\010odometer\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002\"\223\002"
    "\n\016TripDescriptor\022\017\n\007trip_id\030\001 \001(\t\022\020\n\010rou"
    "te_id\030\005 \001(\t\022\022\n\nstart_time\030\002 \001(\t\022\022\n\nstart"
    "_date\030\003 \001(\t\022T\n\025schedule_relationship\030\004 \001"
    "(\01625.transit_realtime.TripDescriptor.Sch"
    "eduleRelationship\"`\n\024ScheduleRelationshi"
    "p\022\r\n\tSCHEDULED\020\000\022\t\n\005ADDED\020\001\022\017\n\013UNSCHEDUL"
    "ED\020\002\022\014\n\010CANCELED\020\003\022\017\n\013REPLACEMENT\020\005\"E\n\021V"
    "ehicleDescriptor\022\n\n\002id\030\001 \001(\t\022\r\n\005label\030\002 "
    "\001(\t\022\025\n\rlicense_plate\030\003 \001(\t\"\212\001\n\016EntitySel"
    "ector\022\021\n\tagency_id\030\001 \001(\t\022\020\n\010route_id\030\002 \001"
    "(\t\022\022\n\nroute_type\030\003 \001(\005\022.\n\004trip\030\004 \001(\0132 .t"
    "ransit_realtime.TripDescriptor\022\017\n\007stop_i"
    "d\030\005 \001(\t\"\206\001\n\020TranslatedString\022C\n\013translat"
    "ion\030\001 \003(\0132..transit_realtime.TranslatedS"
    "tring.Translation\032-\n\013Translation\022\014\n\004text"
    "\030\001 \002(\t\022\020\n\010language\030\002 \001(\tB\035\n\033com.google.t"
    "ransit.realtime", 3375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gtfs-realtime.proto", &protobuf_RegisterTypes);
  FeedMessage::default_instance_ = new FeedMessage();
  FeedHeader::default_instance_ = new FeedHeader();
  FeedEntity::default_instance_ = new FeedEntity();
  TripUpdate::default_instance_ = new TripUpdate();
  TripUpdate_StopTimeEvent::default_instance_ = new TripUpdate_StopTimeEvent();
  TripUpdate_StopTimeUpdate::default_instance_ = new TripUpdate_StopTimeUpdate();
  VehiclePosition::default_instance_ = new VehiclePosition();
  Alert::default_instance_ = new Alert();
  TimeRange::default_instance_ = new TimeRange();
  Position::default_instance_ = new Position();
  TripDescriptor::default_instance_ = new TripDescriptor();
  VehicleDescriptor::default_instance_ = new VehicleDescriptor();
  EntitySelector::default_instance_ = new EntitySelector();
  TranslatedString::default_instance_ = new TranslatedString();
  TranslatedString_Translation::default_instance_ = new TranslatedString_Translation();
  FeedMessage::default_instance_->InitAsDefaultInstance();
  FeedHeader::default_instance_->InitAsDefaultInstance();
  FeedEntity::default_instance_->InitAsDefaultInstance();
  TripUpdate::default_instance_->InitAsDefaultInstance();
  TripUpdate_StopTimeEvent::default_instance_->InitAsDefaultInstance();
  TripUpdate_StopTimeUpdate::default_instance_->InitAsDefaultInstance();
  VehiclePosition::default_instance_->InitAsDefaultInstance();
  Alert::default_instance_->InitAsDefaultInstance();
  TimeRange::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  TripDescriptor::default_instance_->InitAsDefaultInstance();
  VehicleDescriptor::default_instance_->InitAsDefaultInstance();
  EntitySelector::default_instance_->InitAsDefaultInstance();
  TranslatedString::default_instance_->InitAsDefaultInstance();
  TranslatedString_Translation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gtfs_2drealtime_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gtfs_2drealtime_2eproto {
  StaticDescriptorInitializer_gtfs_2drealtime_2eproto() {
    protobuf_AddDesc_gtfs_2drealtime_2eproto();
  }
} static_descriptor_initializer_gtfs_2drealtime_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FeedMessage::kHeaderFieldNumber;
const int FeedMessage::kEntityFieldNumber;
#endif  // !_MSC_VER

FeedMessage::FeedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::transit_realtime::FeedHeader*>(&::transit_realtime::FeedHeader::default_instance());
}

FeedMessage::FeedMessage(const FeedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedMessage::~FeedMessage() {
  SharedDtor();
}

void FeedMessage::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void FeedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedMessage_descriptor_;
}

const FeedMessage& FeedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

FeedMessage* FeedMessage::default_instance_ = NULL;

FeedMessage* FeedMessage::New() const {
  return new FeedMessage;
}

void FeedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (header_ != NULL) header_->::transit_realtime::FeedHeader::Clear();
    }
  }
  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.FeedHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }
      
      // repeated .transit_realtime.FeedEntity entity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transit_realtime.FeedHeader header = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .transit_realtime.FeedEntity entity = 2;
  for (int i = 0; i < this->entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transit_realtime.FeedHeader header = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .transit_realtime.FeedEntity entity = 2;
  for (int i = 0; i < this->entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transit_realtime.FeedHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
  }
  // repeated .transit_realtime.FeedEntity entity = 2;
  total_size += 1 * this->entity_size();
  for (int i = 0; i < this->entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedMessage::MergeFrom(const FeedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_.MergeFrom(from.entity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_header()->::transit_realtime::FeedHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < entity_size(); i++) {
    if (!this->entity(i).IsInitialized()) return false;
  }
  return true;
}

void FeedMessage::Swap(FeedMessage* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    entity_.Swap(&other->entity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedMessage_descriptor_;
  metadata.reflection = FeedMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FeedHeader_Incrementality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedHeader_Incrementality_descriptor_;
}
bool FeedHeader_Incrementality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FeedHeader_Incrementality FeedHeader::FULL_DATASET;
const FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
const FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
const FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
const int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string FeedHeader::_default_gtfs_realtime_version_;
#ifndef _MSC_VER
const int FeedHeader::kGtfsRealtimeVersionFieldNumber;
const int FeedHeader::kIncrementalityFieldNumber;
const int FeedHeader::kTimestampFieldNumber;
#endif  // !_MSC_VER

FeedHeader::FeedHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedHeader::InitAsDefaultInstance() {
}

FeedHeader::FeedHeader(const FeedHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedHeader::SharedCtor() {
  _cached_size_ = 0;
  gtfs_realtime_version_ = const_cast< ::std::string*>(&_default_gtfs_realtime_version_);
  incrementality_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedHeader::~FeedHeader() {
  SharedDtor();
}

void FeedHeader::SharedDtor() {
  if (gtfs_realtime_version_ != &_default_gtfs_realtime_version_) {
    delete gtfs_realtime_version_;
  }
  if (this != default_instance_) {
  }
}

void FeedHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedHeader_descriptor_;
}

const FeedHeader& FeedHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

FeedHeader* FeedHeader::default_instance_ = NULL;

FeedHeader* FeedHeader::New() const {
  return new FeedHeader;
}

void FeedHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (gtfs_realtime_version_ != &_default_gtfs_realtime_version_) {
        gtfs_realtime_version_->clear();
      }
    }
    incrementality_ = 0;
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gtfs_realtime_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtfs_realtime_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incrementality;
        break;
      }
      
      // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incrementality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::FeedHeader_Incrementality_IsValid(value)) {
            set_incrementality(static_cast< ::transit_realtime::FeedHeader_Incrementality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gtfs_realtime_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gtfs_realtime_version(), output);
  }
  
  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->incrementality(), output);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gtfs_realtime_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtfs_realtime_version().data(), this->gtfs_realtime_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gtfs_realtime_version(), target);
  }
  
  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->incrementality(), target);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gtfs_realtime_version = 1;
    if (has_gtfs_realtime_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtfs_realtime_version());
    }
    
    // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2 [default = FULL_DATASET];
    if (has_incrementality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->incrementality());
    }
    
    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedHeader::MergeFrom(const FeedHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gtfs_realtime_version(from.gtfs_realtime_version());
    }
    if (from._has_bit(1)) {
      set_incrementality(from.incrementality());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FeedHeader::Swap(FeedHeader* other) {
  if (other != this) {
    std::swap(gtfs_realtime_version_, other->gtfs_realtime_version_);
    std::swap(incrementality_, other->incrementality_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedHeader_descriptor_;
  metadata.reflection = FeedHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string FeedEntity::_default_id_;
#ifndef _MSC_VER
const int FeedEntity::kIdFieldNumber;
const int FeedEntity::kIsDeletedFieldNumber;
const int FeedEntity::kTripUpdateFieldNumber;
const int FeedEntity::kVehicleFieldNumber;
const int FeedEntity::kAlertFieldNumber;
#endif  // !_MSC_VER

FeedEntity::FeedEntity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeedEntity::InitAsDefaultInstance() {
  trip_update_ = const_cast< ::transit_realtime::TripUpdate*>(&::transit_realtime::TripUpdate::default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehiclePosition*>(&::transit_realtime::VehiclePosition::default_instance());
  alert_ = const_cast< ::transit_realtime::Alert*>(&::transit_realtime::Alert::default_instance());
}

FeedEntity::FeedEntity(const FeedEntity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeedEntity::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  is_deleted_ = false;
  trip_update_ = NULL;
  vehicle_ = NULL;
  alert_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedEntity::~FeedEntity() {
  SharedDtor();
}

void FeedEntity::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
    delete trip_update_;
    delete vehicle_;
    delete alert_;
  }
}

void FeedEntity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedEntity_descriptor_;
}

const FeedEntity& FeedEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

FeedEntity* FeedEntity::default_instance_ = NULL;

FeedEntity* FeedEntity::New() const {
  return new FeedEntity;
}

void FeedEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    is_deleted_ = false;
    if (_has_bit(2)) {
      if (trip_update_ != NULL) trip_update_->::transit_realtime::TripUpdate::Clear();
    }
    if (_has_bit(3)) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehiclePosition::Clear();
    }
    if (_has_bit(4)) {
      if (alert_ != NULL) alert_->::transit_realtime::Alert::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_deleted;
        break;
      }
      
      // optional bool is_deleted = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deleted_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trip_update;
        break;
      }
      
      // optional .transit_realtime.TripUpdate trip_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vehicle;
        break;
      }
      
      // optional .transit_realtime.VehiclePosition vehicle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alert;
        break;
      }
      
      // optional .transit_realtime.Alert alert = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional bool is_deleted = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deleted(), output);
  }
  
  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trip_update(), output);
  }
  
  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vehicle(), output);
  }
  
  // optional .transit_realtime.Alert alert = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->alert(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeedEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional bool is_deleted = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deleted(), target);
  }
  
  // optional .transit_realtime.TripUpdate trip_update = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trip_update(), target);
  }
  
  // optional .transit_realtime.VehiclePosition vehicle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vehicle(), target);
  }
  
  // optional .transit_realtime.Alert alert = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->alert(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeedEntity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional bool is_deleted = 2 [default = false];
    if (has_is_deleted()) {
      total_size += 1 + 1;
    }
    
    // optional .transit_realtime.TripUpdate trip_update = 3;
    if (has_trip_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip_update());
    }
    
    // optional .transit_realtime.VehiclePosition vehicle = 4;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }
    
    // optional .transit_realtime.Alert alert = 5;
    if (has_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alert());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedEntity::MergeFrom(const FeedEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_is_deleted(from.is_deleted());
    }
    if (from._has_bit(2)) {
      mutable_trip_update()->::transit_realtime::TripUpdate::MergeFrom(from.trip_update());
    }
    if (from._has_bit(3)) {
      mutable_vehicle()->::transit_realtime::VehiclePosition::MergeFrom(from.vehicle());
    }
    if (from._has_bit(4)) {
      mutable_alert()->::transit_realtime::Alert::MergeFrom(from.alert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEntity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_trip_update()) {
    if (!this->trip_update().IsInitialized()) return false;
  }
  if (has_vehicle()) {
    if (!this->vehicle().IsInitialized()) return false;
  }
  if (has_alert()) {
    if (!this->alert().IsInitialized()) return false;
  }
  return true;
}

void FeedEntity::Swap(FeedEntity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_deleted_, other->is_deleted_);
    std::swap(trip_update_, other->trip_update_);
    std::swap(vehicle_, other->vehicle_);
    std::swap(alert_, other->alert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedEntity_descriptor_;
  metadata.reflection = FeedEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TripUpdate_StopTimeEvent::kDelayFieldNumber;
const int TripUpdate_StopTimeEvent::kTimeFieldNumber;
const int TripUpdate_StopTimeEvent::kUncertaintyFieldNumber;
#endif  // !_MSC_VER

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripUpdate_StopTimeEvent::InitAsDefaultInstance() {
}

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate_StopTimeEvent::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  uncertainty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  SharedDtor();
}

void TripUpdate_StopTimeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate_StopTimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeEvent_descriptor_;
}

const TripUpdate_StopTimeEvent& TripUpdate_StopTimeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::default_instance_ = NULL;

TripUpdate_StopTimeEvent* TripUpdate_StopTimeEvent::New() const {
  return new TripUpdate_StopTimeEvent;
}

void TripUpdate_StopTimeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    uncertainty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripUpdate_StopTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uncertainty;
        break;
      }
      
      // optional int32 uncertainty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncertainty_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate_StopTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 delay = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }
  
  // optional int64 time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional int32 uncertainty = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uncertainty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripUpdate_StopTimeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 delay = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }
  
  // optional int64 time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional int32 uncertainty = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uncertainty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripUpdate_StopTimeEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }
    
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 uncertainty = 3;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uncertainty());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripUpdate_StopTimeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripUpdate_StopTimeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripUpdate_StopTimeEvent::MergeFrom(const TripUpdate_StopTimeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_delay(from.delay());
    }
    if (from._has_bit(1)) {
      set_time(from.time());
    }
    if (from._has_bit(2)) {
      set_uncertainty(from.uncertainty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripUpdate_StopTimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {
  
  return true;
}

void TripUpdate_StopTimeEvent::Swap(TripUpdate_StopTimeEvent* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(time_, other->time_);
    std::swap(uncertainty_, other->uncertainty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripUpdate_StopTimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_StopTimeEvent_descriptor_;
  metadata.reflection = TripUpdate_StopTimeEvent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor_;
}
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
const TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
const int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string TripUpdate_StopTimeUpdate::_default_stop_id_;
#ifndef _MSC_VER
const int TripUpdate_StopTimeUpdate::kStopSequenceFieldNumber;
const int TripUpdate_StopTimeUpdate::kStopIdFieldNumber;
const int TripUpdate_StopTimeUpdate::kArrivalFieldNumber;
const int TripUpdate_StopTimeUpdate::kDepartureFieldNumber;
const int TripUpdate_StopTimeUpdate::kScheduleRelationshipFieldNumber;
#endif  // !_MSC_VER

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripUpdate_StopTimeUpdate::InitAsDefaultInstance() {
  arrival_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(&::transit_realtime::TripUpdate_StopTimeEvent::default_instance());
  departure_ = const_cast< ::transit_realtime::TripUpdate_StopTimeEvent*>(&::transit_realtime::TripUpdate_StopTimeEvent::default_instance());
}

TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate_StopTimeUpdate::SharedCtor() {
  _cached_size_ = 0;
  stop_sequence_ = 0u;
  stop_id_ = const_cast< ::std::string*>(&_default_stop_id_);
  arrival_ = NULL;
  departure_ = NULL;
  schedule_relationship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  SharedDtor();
}

void TripUpdate_StopTimeUpdate::SharedDtor() {
  if (stop_id_ != &_default_stop_id_) {
    delete stop_id_;
  }
  if (this != default_instance_) {
    delete arrival_;
    delete departure_;
  }
}

void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate_StopTimeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_StopTimeUpdate_descriptor_;
}

const TripUpdate_StopTimeUpdate& TripUpdate_StopTimeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::default_instance_ = NULL;

TripUpdate_StopTimeUpdate* TripUpdate_StopTimeUpdate::New() const {
  return new TripUpdate_StopTimeUpdate;
}

void TripUpdate_StopTimeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_sequence_ = 0u;
    if (_has_bit(1)) {
      if (stop_id_ != &_default_stop_id_) {
        stop_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (arrival_ != NULL) arrival_->::transit_realtime::TripUpdate_StopTimeEvent::Clear();
    }
    if (_has_bit(3)) {
      if (departure_ != NULL) departure_->::transit_realtime::TripUpdate_StopTimeEvent::Clear();
    }
    schedule_relationship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripUpdate_StopTimeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stop_sequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_sequence_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arrival;
        break;
      }
      
      // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrival()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_departure;
        break;
      }
      
      // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_departure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_departure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop_id;
        break;
      }
      
      // optional string stop_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_schedule_relationship;
        break;
      }
      
      // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate_StopTimeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stop_sequence = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stop_sequence(), output);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrival(), output);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->departure(), output);
  }
  
  // optional string stop_id = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stop_id(), output);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->schedule_relationship(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripUpdate_StopTimeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stop_sequence = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stop_sequence(), target);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrival(), target);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->departure(), target);
  }
  
  // optional string stop_id = 4;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stop_id(), target);
  }
  
  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->schedule_relationship(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripUpdate_StopTimeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stop_sequence = 1;
    if (has_stop_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_sequence());
    }
    
    // optional string stop_id = 4;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }
    
    // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
    if (has_arrival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arrival());
    }
    
    // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
    if (has_departure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->departure());
    }
    
    // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5 [default = SCHEDULED];
    if (has_schedule_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate_StopTimeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripUpdate_StopTimeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripUpdate_StopTimeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripUpdate_StopTimeUpdate::MergeFrom(const TripUpdate_StopTimeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stop_sequence(from.stop_sequence());
    }
    if (from._has_bit(1)) {
      set_stop_id(from.stop_id());
    }
    if (from._has_bit(2)) {
      mutable_arrival()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.arrival());
    }
    if (from._has_bit(3)) {
      mutable_departure()->::transit_realtime::TripUpdate_StopTimeEvent::MergeFrom(from.departure());
    }
    if (from._has_bit(4)) {
      set_schedule_relationship(from.schedule_relationship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripUpdate_StopTimeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {
  
  return true;
}

void TripUpdate_StopTimeUpdate::Swap(TripUpdate_StopTimeUpdate* other) {
  if (other != this) {
    std::swap(stop_sequence_, other->stop_sequence_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(arrival_, other->arrival_);
    std::swap(departure_, other->departure_);
    std::swap(schedule_relationship_, other->schedule_relationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripUpdate_StopTimeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_StopTimeUpdate_descriptor_;
  metadata.reflection = TripUpdate_StopTimeUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TripUpdate::kTripFieldNumber;
const int TripUpdate::kVehicleFieldNumber;
const int TripUpdate::kStopTimeUpdateFieldNumber;
#endif  // !_MSC_VER

TripUpdate::TripUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripUpdate::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(&::transit_realtime::VehicleDescriptor::default_instance());
}

TripUpdate::TripUpdate(const TripUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripUpdate::SharedCtor() {
  _cached_size_ = 0;
  trip_ = NULL;
  vehicle_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripUpdate::~TripUpdate() {
  SharedDtor();
}

void TripUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete trip_;
    delete vehicle_;
  }
}

void TripUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripUpdate_descriptor_;
}

const TripUpdate& TripUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TripUpdate* TripUpdate::default_instance_ = NULL;

TripUpdate* TripUpdate::New() const {
  return new TripUpdate;
}

void TripUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (_has_bit(1)) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehicleDescriptor::Clear();
    }
  }
  stop_time_update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_time_update;
        break;
      }
      
      // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_time_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_time_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stop_time_update;
        if (input->ExpectTag(26)) goto parse_vehicle;
        break;
      }
      
      // optional .transit_realtime.VehicleDescriptor vehicle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .transit_realtime.TripDescriptor trip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trip(), output);
  }
  
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (int i = 0; i < this->stop_time_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stop_time_update(i), output);
  }
  
  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vehicle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .transit_realtime.TripDescriptor trip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trip(), target);
  }
  
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (int i = 0; i < this->stop_time_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stop_time_update(i), target);
  }
  
  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vehicle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .transit_realtime.TripDescriptor trip = 1;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }
    
    // optional .transit_realtime.VehicleDescriptor vehicle = 3;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }
    
  }
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  total_size += 1 * this->stop_time_update_size();
  for (int i = 0; i < this->stop_time_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stop_time_update(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripUpdate::MergeFrom(const TripUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stop_time_update_.MergeFrom(from.stop_time_update_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from._has_bit(1)) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TripUpdate::Swap(TripUpdate* other) {
  if (other != this) {
    std::swap(trip_, other->trip_);
    std::swap(vehicle_, other->vehicle_);
    stop_time_update_.Swap(&other->stop_time_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripUpdate_descriptor_;
  metadata.reflection = TripUpdate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_VehicleStopStatus_descriptor_;
}
bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
const VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
const VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
const int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_CongestionLevel_descriptor_;
}
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
const VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
const VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
const VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
const VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
const int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string VehiclePosition::_default_stop_id_;
#ifndef _MSC_VER
const int VehiclePosition::kTripFieldNumber;
const int VehiclePosition::kVehicleFieldNumber;
const int VehiclePosition::kPositionFieldNumber;
const int VehiclePosition::kCurrentStopSequenceFieldNumber;
const int VehiclePosition::kStopIdFieldNumber;
const int VehiclePosition::kCurrentStatusFieldNumber;
const int VehiclePosition::kTimestampFieldNumber;
const int VehiclePosition::kCongestionLevelFieldNumber;
#endif  // !_MSC_VER

VehiclePosition::VehiclePosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VehiclePosition::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
  vehicle_ = const_cast< ::transit_realtime::VehicleDescriptor*>(&::transit_realtime::VehicleDescriptor::default_instance());
  position_ = const_cast< ::transit_realtime::Position*>(&::transit_realtime::Position::default_instance());
}

VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VehiclePosition::SharedCtor() {
  _cached_size_ = 0;
  trip_ = NULL;
  vehicle_ = NULL;
  position_ = NULL;
  current_stop_sequence_ = 0u;
  stop_id_ = const_cast< ::std::string*>(&_default_stop_id_);
  current_status_ = 2;
  timestamp_ = GOOGLE_ULONGLONG(0);
  congestion_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehiclePosition::~VehiclePosition() {
  SharedDtor();
}

void VehiclePosition::SharedDtor() {
  if (stop_id_ != &_default_stop_id_) {
    delete stop_id_;
  }
  if (this != default_instance_) {
    delete trip_;
    delete vehicle_;
    delete position_;
  }
}

void VehiclePosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehiclePosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehiclePosition_descriptor_;
}

const VehiclePosition& VehiclePosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

VehiclePosition* VehiclePosition::default_instance_ = NULL;

VehiclePosition* VehiclePosition::New() const {
  return new VehiclePosition;
}

void VehiclePosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (_has_bit(1)) {
      if (vehicle_ != NULL) vehicle_->::transit_realtime::VehicleDescriptor::Clear();
    }
    if (_has_bit(2)) {
      if (position_ != NULL) position_->::transit_realtime::Position::Clear();
    }
    current_stop_sequence_ = 0u;
    if (_has_bit(4)) {
      if (stop_id_ != &_default_stop_id_) {
        stop_id_->clear();
      }
    }
    current_status_ = 2;
    timestamp_ = GOOGLE_ULONGLONG(0);
    congestion_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehiclePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .transit_realtime.TripDescriptor trip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .transit_realtime.Position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_stop_sequence;
        break;
      }
      
      // optional uint32 current_stop_sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_stop_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_stop_sequence_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_status;
        break;
      }
      
      // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(value)) {
            set_current_status(static_cast< ::transit_realtime::VehiclePosition_VehicleStopStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_congestion_level;
        break;
      }
      
      // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_congestion_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::VehiclePosition_CongestionLevel_IsValid(value)) {
            set_congestion_level(static_cast< ::transit_realtime::VehiclePosition_CongestionLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stop_id;
        break;
      }
      
      // optional string stop_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_vehicle;
        break;
      }
      
      // optional .transit_realtime.VehicleDescriptor vehicle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vehicle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehiclePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trip(), output);
  }
  
  // optional .transit_realtime.Position position = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // optional uint32 current_stop_sequence = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_stop_sequence(), output);
  }
  
  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->current_status(), output);
  }
  
  // optional uint64 timestamp = 5;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }
  
  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->congestion_level(), output);
  }
  
  // optional string stop_id = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stop_id(), output);
  }
  
  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vehicle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VehiclePosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .transit_realtime.TripDescriptor trip = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trip(), target);
  }
  
  // optional .transit_realtime.Position position = 2;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // optional uint32 current_stop_sequence = 3;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_stop_sequence(), target);
  }
  
  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->current_status(), target);
  }
  
  // optional uint64 timestamp = 5;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }
  
  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->congestion_level(), target);
  }
  
  // optional string stop_id = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stop_id(), target);
  }
  
  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vehicle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VehiclePosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .transit_realtime.TripDescriptor trip = 1;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }
    
    // optional .transit_realtime.VehicleDescriptor vehicle = 8;
    if (has_vehicle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle());
    }
    
    // optional .transit_realtime.Position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional uint32 current_stop_sequence = 3;
    if (has_current_stop_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_stop_sequence());
    }
    
    // optional string stop_id = 7;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }
    
    // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];
    if (has_current_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_status());
    }
    
    // optional uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
    if (has_congestion_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->congestion_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehiclePosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehiclePosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehiclePosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehiclePosition::MergeFrom(const VehiclePosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from._has_bit(1)) {
      mutable_vehicle()->::transit_realtime::VehicleDescriptor::MergeFrom(from.vehicle());
    }
    if (from._has_bit(2)) {
      mutable_position()->::transit_realtime::Position::MergeFrom(from.position());
    }
    if (from._has_bit(3)) {
      set_current_stop_sequence(from.current_stop_sequence());
    }
    if (from._has_bit(4)) {
      set_stop_id(from.stop_id());
    }
    if (from._has_bit(5)) {
      set_current_status(from.current_status());
    }
    if (from._has_bit(6)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(7)) {
      set_congestion_level(from.congestion_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehiclePosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void VehiclePosition::Swap(VehiclePosition* other) {
  if (other != this) {
    std::swap(trip_, other->trip_);
    std::swap(vehicle_, other->vehicle_);
    std::swap(position_, other->position_);
    std::swap(current_stop_sequence_, other->current_stop_sequence_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(current_status_, other->current_status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(congestion_level_, other->congestion_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehiclePosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehiclePosition_descriptor_;
  metadata.reflection = VehiclePosition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Alert_Cause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_Cause_descriptor_;
}
bool Alert_Cause_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Alert_Cause Alert::UNKNOWN_CAUSE;
const Alert_Cause Alert::OTHER_CAUSE;
const Alert_Cause Alert::TECHNICAL_PROBLEM;
const Alert_Cause Alert::STRIKE;
const Alert_Cause Alert::DEMONSTRATION;
const Alert_Cause Alert::ACCIDENT;
const Alert_Cause Alert::HOLIDAY;
const Alert_Cause Alert::WEATHER;
const Alert_Cause Alert::MAINTENANCE;
const Alert_Cause Alert::CONSTRUCTION;
const Alert_Cause Alert::POLICE_ACTIVITY;
const Alert_Cause Alert::MEDICAL_EMERGENCY;
const Alert_Cause Alert::Cause_MIN;
const Alert_Cause Alert::Cause_MAX;
const int Alert::Cause_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Alert_Effect_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_Effect_descriptor_;
}
bool Alert_Effect_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Alert_Effect Alert::NO_SERVICE;
const Alert_Effect Alert::REDUCED_SERVICE;
const Alert_Effect Alert::SIGNIFICANT_DELAYS;
const Alert_Effect Alert::DETOUR;
const Alert_Effect Alert::ADDITIONAL_SERVICE;
const Alert_Effect Alert::MODIFIED_SERVICE;
const Alert_Effect Alert::OTHER_EFFECT;
const Alert_Effect Alert::UNKNOWN_EFFECT;
const Alert_Effect Alert::STOP_MOVED;
const Alert_Effect Alert::Effect_MIN;
const Alert_Effect Alert::Effect_MAX;
const int Alert::Effect_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Alert::kActivePeriodFieldNumber;
const int Alert::kInformedEntityFieldNumber;
const int Alert::kCauseFieldNumber;
const int Alert::kEffectFieldNumber;
const int Alert::kUrlFieldNumber;
const int Alert::kHeaderTextFieldNumber;
const int Alert::kDescriptionTextFieldNumber;
#endif  // !_MSC_VER

Alert::Alert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Alert::InitAsDefaultInstance() {
  url_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
  header_text_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
  description_text_ = const_cast< ::transit_realtime::TranslatedString*>(&::transit_realtime::TranslatedString::default_instance());
}

Alert::Alert(const Alert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Alert::SharedCtor() {
  _cached_size_ = 0;
  cause_ = 1;
  effect_ = 8;
  url_ = NULL;
  header_text_ = NULL;
  description_text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Alert::~Alert() {
  SharedDtor();
}

void Alert::SharedDtor() {
  if (this != default_instance_) {
    delete url_;
    delete header_text_;
    delete description_text_;
  }
}

void Alert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Alert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_descriptor_;
}

const Alert& Alert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

Alert* Alert::default_instance_ = NULL;

Alert* Alert::New() const {
  return new Alert;
}

void Alert::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    cause_ = 1;
    effect_ = 8;
    if (_has_bit(4)) {
      if (url_ != NULL) url_->::transit_realtime::TranslatedString::Clear();
    }
    if (_has_bit(5)) {
      if (header_text_ != NULL) header_text_->::transit_realtime::TranslatedString::Clear();
    }
    if (_has_bit(6)) {
      if (description_text_ != NULL) description_text_->::transit_realtime::TranslatedString::Clear();
    }
  }
  active_period_.Clear();
  informed_entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Alert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TimeRange active_period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_period:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_period()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_active_period;
        if (input->ExpectTag(42)) goto parse_informed_entity;
        break;
      }
      
      // repeated .transit_realtime.EntitySelector informed_entity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_informed_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_informed_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_informed_entity;
        if (input->ExpectTag(48)) goto parse_cause;
        break;
      }
      
      // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Cause_IsValid(value)) {
            set_cause(static_cast< ::transit_realtime::Alert_Cause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_effect;
        break;
      }
      
      // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::Alert_Effect_IsValid(value)) {
            set_effect(static_cast< ::transit_realtime::Alert_Effect >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }
      
      // optional .transit_realtime.TranslatedString url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_header_text;
        break;
      }
      
      // optional .transit_realtime.TranslatedString header_text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_description_text;
        break;
      }
      
      // optional .transit_realtime.TranslatedString description_text = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Alert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transit_realtime.TimeRange active_period = 1;
  for (int i = 0; i < this->active_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active_period(i), output);
  }
  
  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (int i = 0; i < this->informed_entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->informed_entity(i), output);
  }
  
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cause(), output);
  }
  
  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->effect(), output);
  }
  
  // optional .transit_realtime.TranslatedString url = 8;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->url(), output);
  }
  
  // optional .transit_realtime.TranslatedString header_text = 10;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->header_text(), output);
  }
  
  // optional .transit_realtime.TranslatedString description_text = 11;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->description_text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Alert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transit_realtime.TimeRange active_period = 1;
  for (int i = 0; i < this->active_period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->active_period(i), target);
  }
  
  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  for (int i = 0; i < this->informed_entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->informed_entity(i), target);
  }
  
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cause(), target);
  }
  
  // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->effect(), target);
  }
  
  // optional .transit_realtime.TranslatedString url = 8;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->url(), target);
  }
  
  // optional .transit_realtime.TranslatedString header_text = 10;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->header_text(), target);
  }
  
  // optional .transit_realtime.TranslatedString description_text = 11;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->description_text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Alert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
    }
    
    // optional .transit_realtime.Alert.Effect effect = 7 [default = UNKNOWN_EFFECT];
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }
    
    // optional .transit_realtime.TranslatedString url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url());
    }
    
    // optional .transit_realtime.TranslatedString header_text = 10;
    if (has_header_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header_text());
    }
    
    // optional .transit_realtime.TranslatedString description_text = 11;
    if (has_description_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description_text());
    }
    
  }
  // repeated .transit_realtime.TimeRange active_period = 1;
  total_size += 1 * this->active_period_size();
  for (int i = 0; i < this->active_period_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_period(i));
  }
  
  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  total_size += 1 * this->informed_entity_size();
  for (int i = 0; i < this->informed_entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->informed_entity(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Alert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Alert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Alert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_period_.MergeFrom(from.active_period_);
  informed_entity_.MergeFrom(from.informed_entity_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_cause(from.cause());
    }
    if (from._has_bit(3)) {
      set_effect(from.effect());
    }
    if (from._has_bit(4)) {
      mutable_url()->::transit_realtime::TranslatedString::MergeFrom(from.url());
    }
    if (from._has_bit(5)) {
      mutable_header_text()->::transit_realtime::TranslatedString::MergeFrom(from.header_text());
    }
    if (from._has_bit(6)) {
      mutable_description_text()->::transit_realtime::TranslatedString::MergeFrom(from.description_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Alert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  
  if (has_url()) {
    if (!this->url().IsInitialized()) return false;
  }
  if (has_header_text()) {
    if (!this->header_text().IsInitialized()) return false;
  }
  if (has_description_text()) {
    if (!this->description_text().IsInitialized()) return false;
  }
  return true;
}

void Alert::Swap(Alert* other) {
  if (other != this) {
    active_period_.Swap(&other->active_period_);
    informed_entity_.Swap(&other->informed_entity_);
    std::swap(cause_, other->cause_);
    std::swap(effect_, other->effect_);
    std::swap(url_, other->url_);
    std::swap(header_text_, other->header_text_);
    std::swap(description_text_, other->description_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Alert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Alert_descriptor_;
  metadata.reflection = Alert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeRange::kStartFieldNumber;
const int TimeRange::kEndFieldNumber;
#endif  // !_MSC_VER

TimeRange::TimeRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeRange::InitAsDefaultInstance() {
}

TimeRange::TimeRange(const TimeRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeRange::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeRange::~TimeRange() {
  SharedDtor();
}

void TimeRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeRange_descriptor_;
}

const TimeRange& TimeRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TimeRange* TimeRange::default_instance_ = NULL;

TimeRange* TimeRange::New() const {
  return new TimeRange;
}

void TimeRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }
      
      // optional uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 start = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }
  
  // optional uint64 end = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 start = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }
  
  // optional uint64 end = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeRange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }
    
    // optional uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_start(from.start());
    }
    if (from._has_bit(1)) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  
  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeRange_descriptor_;
  metadata.reflection = TimeRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kLatitudeFieldNumber;
const int Position::kLongitudeFieldNumber;
const int Position::kBearingFieldNumber;
const int Position::kOdometerFieldNumber;
const int Position::kSpeedFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  bearing_ = 0;
  odometer_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    bearing_ = 0;
    odometer_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_longitude;
        break;
      }
      
      // required float longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bearing;
        break;
      }
      
      // optional float bearing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_odometer;
        break;
      }
      
      // optional double odometer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_odometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometer_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }
      
      // optional float speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float latitude = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }
  
  // required float longitude = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }
  
  // optional float bearing = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bearing(), output);
  }
  
  // optional double odometer = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odometer(), output);
  }
  
  // optional float speed = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float latitude = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }
  
  // required float longitude = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }
  
  // optional float bearing = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bearing(), target);
  }
  
  // optional double odometer = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odometer(), target);
  }
  
  // optional float speed = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 4;
    }
    
    // required float longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 4;
    }
    
    // optional float bearing = 3;
    if (has_bearing()) {
      total_size += 1 + 4;
    }
    
    // optional double odometer = 4;
    if (has_odometer()) {
      total_size += 1 + 8;
    }
    
    // optional float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_latitude(from.latitude());
    }
    if (from._has_bit(1)) {
      set_longitude(from.longitude());
    }
    if (from._has_bit(2)) {
      set_bearing(from.bearing());
    }
    if (from._has_bit(3)) {
      set_odometer(from.odometer());
    }
    if (from._has_bit(4)) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(bearing_, other->bearing_);
    std::swap(odometer_, other->odometer_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDescriptor_ScheduleRelationship_descriptor_;
}
bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
const TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
const TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
const TripDescriptor_ScheduleRelationship TripDescriptor::REPLACEMENT;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
const TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
const int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string TripDescriptor::_default_trip_id_;
const ::std::string TripDescriptor::_default_route_id_;
const ::std::string TripDescriptor::_default_start_time_;
const ::std::string TripDescriptor::_default_start_date_;
#ifndef _MSC_VER
const int TripDescriptor::kTripIdFieldNumber;
const int TripDescriptor::kRouteIdFieldNumber;
const int TripDescriptor::kStartTimeFieldNumber;
const int TripDescriptor::kStartDateFieldNumber;
const int TripDescriptor::kScheduleRelationshipFieldNumber;
#endif  // !_MSC_VER

TripDescriptor::TripDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripDescriptor::InitAsDefaultInstance() {
}

TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripDescriptor::SharedCtor() {
  _cached_size_ = 0;
  trip_id_ = const_cast< ::std::string*>(&_default_trip_id_);
  route_id_ = const_cast< ::std::string*>(&_default_route_id_);
  start_time_ = const_cast< ::std::string*>(&_default_start_time_);
  start_date_ = const_cast< ::std::string*>(&_default_start_date_);
  schedule_relationship_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripDescriptor::~TripDescriptor() {
  SharedDtor();
}

void TripDescriptor::SharedDtor() {
  if (trip_id_ != &_default_trip_id_) {
    delete trip_id_;
  }
  if (route_id_ != &_default_route_id_) {
    delete route_id_;
  }
  if (start_time_ != &_default_start_time_) {
    delete start_time_;
  }
  if (start_date_ != &_default_start_date_) {
    delete start_date_;
  }
  if (this != default_instance_) {
  }
}

void TripDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripDescriptor_descriptor_;
}

const TripDescriptor& TripDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TripDescriptor* TripDescriptor::default_instance_ = NULL;

TripDescriptor* TripDescriptor::New() const {
  return new TripDescriptor;
}

void TripDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (trip_id_ != &_default_trip_id_) {
        trip_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (route_id_ != &_default_route_id_) {
        route_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (start_time_ != &_default_start_time_) {
        start_time_->clear();
      }
    }
    if (_has_bit(3)) {
      if (start_date_ != &_default_start_date_) {
        start_date_->clear();
      }
    }
    schedule_relationship_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trip_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trip_id().data(), this->trip_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }
      
      // optional string start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_date;
        break;
      }
      
      // optional string start_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_date().data(), this->start_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_schedule_relationship;
        break;
      }
      
      // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schedule_relationship:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(value)) {
            set_schedule_relationship(static_cast< ::transit_realtime::TripDescriptor_ScheduleRelationship >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_route_id;
        break;
      }
      
      // optional string route_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_id().data(), this->route_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trip_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trip_id().data(), this->trip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trip_id(), output);
  }
  
  // optional string start_time = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->start_time(), output);
  }
  
  // optional string start_date = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->start_date(), output);
  }
  
  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->schedule_relationship(), output);
  }
  
  // optional string route_id = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->route_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trip_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trip_id().data(), this->trip_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trip_id(), target);
  }
  
  // optional string start_time = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }
  
  // optional string start_date = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_date().data(), this->start_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_date(), target);
  }
  
  // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->schedule_relationship(), target);
  }
  
  // optional string route_id = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->route_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trip_id = 1;
    if (has_trip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trip_id());
    }
    
    // optional string route_id = 5;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }
    
    // optional string start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }
    
    // optional string start_date = 3;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }
    
    // optional .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
    if (has_schedule_relationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->schedule_relationship());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripDescriptor::MergeFrom(const TripDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_trip_id(from.trip_id());
    }
    if (from._has_bit(1)) {
      set_route_id(from.route_id());
    }
    if (from._has_bit(2)) {
      set_start_time(from.start_time());
    }
    if (from._has_bit(3)) {
      set_start_date(from.start_date());
    }
    if (from._has_bit(4)) {
      set_schedule_relationship(from.schedule_relationship());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {
  
  return true;
}

void TripDescriptor::Swap(TripDescriptor* other) {
  if (other != this) {
    std::swap(trip_id_, other->trip_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(start_date_, other->start_date_);
    std::swap(schedule_relationship_, other->schedule_relationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripDescriptor_descriptor_;
  metadata.reflection = TripDescriptor_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string VehicleDescriptor::_default_id_;
const ::std::string VehicleDescriptor::_default_label_;
const ::std::string VehicleDescriptor::_default_license_plate_;
#ifndef _MSC_VER
const int VehicleDescriptor::kIdFieldNumber;
const int VehicleDescriptor::kLabelFieldNumber;
const int VehicleDescriptor::kLicensePlateFieldNumber;
#endif  // !_MSC_VER

VehicleDescriptor::VehicleDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VehicleDescriptor::InitAsDefaultInstance() {
}

VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VehicleDescriptor::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  label_ = const_cast< ::std::string*>(&_default_label_);
  license_plate_ = const_cast< ::std::string*>(&_default_license_plate_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VehicleDescriptor::~VehicleDescriptor() {
  SharedDtor();
}

void VehicleDescriptor::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (license_plate_ != &_default_license_plate_) {
    delete license_plate_;
  }
  if (this != default_instance_) {
  }
}

void VehicleDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VehicleDescriptor_descriptor_;
}

const VehicleDescriptor& VehicleDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

VehicleDescriptor* VehicleDescriptor::default_instance_ = NULL;

VehicleDescriptor* VehicleDescriptor::New() const {
  return new VehicleDescriptor;
}

void VehicleDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    if (_has_bit(2)) {
      if (license_plate_ != &_default_license_plate_) {
        license_plate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VehicleDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_license_plate;
        break;
      }
      
      // optional string license_plate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_license_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->license_plate().data(), this->license_plate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VehicleDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // optional string license_plate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->license_plate().data(), this->license_plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->license_plate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VehicleDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional string label = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // optional string license_plate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->license_plate().data(), this->license_plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->license_plate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VehicleDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // optional string license_plate = 3;
    if (has_license_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VehicleDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VehicleDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VehicleDescriptor::MergeFrom(const VehicleDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_label(from.label());
    }
    if (from._has_bit(2)) {
      set_license_plate(from.license_plate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VehicleDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {
  
  return true;
}

void VehicleDescriptor::Swap(VehicleDescriptor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(license_plate_, other->license_plate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VehicleDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VehicleDescriptor_descriptor_;
  metadata.reflection = VehicleDescriptor_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string EntitySelector::_default_agency_id_;
const ::std::string EntitySelector::_default_route_id_;
const ::std::string EntitySelector::_default_stop_id_;
#ifndef _MSC_VER
const int EntitySelector::kAgencyIdFieldNumber;
const int EntitySelector::kRouteIdFieldNumber;
const int EntitySelector::kRouteTypeFieldNumber;
const int EntitySelector::kTripFieldNumber;
const int EntitySelector::kStopIdFieldNumber;
#endif  // !_MSC_VER

EntitySelector::EntitySelector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntitySelector::InitAsDefaultInstance() {
  trip_ = const_cast< ::transit_realtime::TripDescriptor*>(&::transit_realtime::TripDescriptor::default_instance());
}

EntitySelector::EntitySelector(const EntitySelector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySelector::SharedCtor() {
  _cached_size_ = 0;
  agency_id_ = const_cast< ::std::string*>(&_default_agency_id_);
  route_id_ = const_cast< ::std::string*>(&_default_route_id_);
  route_type_ = 0;
  trip_ = NULL;
  stop_id_ = const_cast< ::std::string*>(&_default_stop_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySelector::~EntitySelector() {
  SharedDtor();
}

void EntitySelector::SharedDtor() {
  if (agency_id_ != &_default_agency_id_) {
    delete agency_id_;
  }
  if (route_id_ != &_default_route_id_) {
    delete route_id_;
  }
  if (stop_id_ != &_default_stop_id_) {
    delete stop_id_;
  }
  if (this != default_instance_) {
    delete trip_;
  }
}

void EntitySelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySelector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitySelector_descriptor_;
}

const EntitySelector& EntitySelector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

EntitySelector* EntitySelector::default_instance_ = NULL;

EntitySelector* EntitySelector::New() const {
  return new EntitySelector;
}

void EntitySelector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agency_id_ != &_default_agency_id_) {
        agency_id_->clear();
      }
    }
    if (_has_bit(1)) {
      if (route_id_ != &_default_route_id_) {
        route_id_->clear();
      }
    }
    route_type_ = 0;
    if (_has_bit(3)) {
      if (trip_ != NULL) trip_->::transit_realtime::TripDescriptor::Clear();
    }
    if (_has_bit(4)) {
      if (stop_id_ != &_default_stop_id_) {
        stop_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntitySelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agency_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agency_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agency_id().data(), this->agency_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_route_id;
        break;
      }
      
      // optional string route_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_id().data(), this->route_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_route_type;
        break;
      }
      
      // optional int32 route_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_route_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_type_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trip;
        break;
      }
      
      // optional .transit_realtime.TripDescriptor trip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stop_id;
        break;
      }
      
      // optional string stop_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stop_id().data(), this->stop_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agency_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agency_id().data(), this->agency_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agency_id(), output);
  }
  
  // optional string route_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->route_id(), output);
  }
  
  // optional int32 route_type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->route_type(), output);
  }
  
  // optional .transit_realtime.TripDescriptor trip = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trip(), output);
  }
  
  // optional string stop_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stop_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntitySelector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agency_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agency_id().data(), this->agency_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agency_id(), target);
  }
  
  // optional string route_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_id().data(), this->route_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route_id(), target);
  }
  
  // optional int32 route_type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->route_type(), target);
  }
  
  // optional .transit_realtime.TripDescriptor trip = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trip(), target);
  }
  
  // optional string stop_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stop_id().data(), this->stop_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stop_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntitySelector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agency_id = 1;
    if (has_agency_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agency_id());
    }
    
    // optional string route_id = 2;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_id());
    }
    
    // optional int32 route_type = 3;
    if (has_route_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_type());
    }
    
    // optional .transit_realtime.TripDescriptor trip = 4;
    if (has_trip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trip());
    }
    
    // optional string stop_id = 5;
    if (has_stop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySelector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntitySelector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntitySelector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntitySelector::MergeFrom(const EntitySelector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_agency_id(from.agency_id());
    }
    if (from._has_bit(1)) {
      set_route_id(from.route_id());
    }
    if (from._has_bit(2)) {
      set_route_type(from.route_type());
    }
    if (from._has_bit(3)) {
      mutable_trip()->::transit_realtime::TripDescriptor::MergeFrom(from.trip());
    }
    if (from._has_bit(4)) {
      set_stop_id(from.stop_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntitySelector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySelector::IsInitialized() const {
  
  return true;
}

void EntitySelector::Swap(EntitySelector* other) {
  if (other != this) {
    std::swap(agency_id_, other->agency_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(route_type_, other->route_type_);
    std::swap(trip_, other->trip_);
    std::swap(stop_id_, other->stop_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntitySelector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitySelector_descriptor_;
  metadata.reflection = EntitySelector_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TranslatedString_Translation::_default_text_;
const ::std::string TranslatedString_Translation::_default_language_;
#ifndef _MSC_VER
const int TranslatedString_Translation::kTextFieldNumber;
const int TranslatedString_Translation::kLanguageFieldNumber;
#endif  // !_MSC_VER

TranslatedString_Translation::TranslatedString_Translation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranslatedString_Translation::InitAsDefaultInstance() {
}

TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranslatedString_Translation::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  language_ = const_cast< ::std::string*>(&_default_language_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslatedString_Translation::~TranslatedString_Translation() {
  SharedDtor();
}

void TranslatedString_Translation::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (language_ != &_default_language_) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void TranslatedString_Translation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslatedString_Translation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslatedString_Translation_descriptor_;
}

const TranslatedString_Translation& TranslatedString_Translation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TranslatedString_Translation* TranslatedString_Translation::default_instance_ = NULL;

TranslatedString_Translation* TranslatedString_Translation::New() const {
  return new TranslatedString_Translation;
}

void TranslatedString_Translation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    if (_has_bit(1)) {
      if (language_ != &_default_language_) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslatedString_Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_language;
        break;
      }
      
      // optional string language = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslatedString_Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // optional string language = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->language(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslatedString_Translation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // optional string language = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->language(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslatedString_Translation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString_Translation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslatedString_Translation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslatedString_Translation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslatedString_Translation::MergeFrom(const TranslatedString_Translation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_text(from.text());
    }
    if (from._has_bit(1)) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslatedString_Translation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TranslatedString_Translation::Swap(TranslatedString_Translation* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslatedString_Translation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslatedString_Translation_descriptor_;
  metadata.reflection = TranslatedString_Translation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TranslatedString::kTranslationFieldNumber;
#endif  // !_MSC_VER

TranslatedString::TranslatedString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranslatedString::InitAsDefaultInstance() {
}

TranslatedString::TranslatedString(const TranslatedString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranslatedString::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslatedString::~TranslatedString() {
  SharedDtor();
}

void TranslatedString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TranslatedString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslatedString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslatedString_descriptor_;
}

const TranslatedString& TranslatedString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gtfs_2drealtime_2eproto();  return *default_instance_;
}

TranslatedString* TranslatedString::default_instance_ = NULL;

TranslatedString* TranslatedString::New() const {
  return new TranslatedString;
}

void TranslatedString::Clear() {
  translation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslatedString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .transit_realtime.TranslatedString.Translation translation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_translation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslatedString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (int i = 0; i < this->translation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->translation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslatedString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  for (int i = 0; i < this->translation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->translation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslatedString::ByteSize() const {
  int total_size = 0;
  
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  total_size += 1 * this->translation_size();
  for (int i = 0; i < this->translation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->translation(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslatedString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslatedString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslatedString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslatedString::MergeFrom(const TranslatedString& from) {
  GOOGLE_CHECK_NE(&from, this);
  translation_.MergeFrom(from.translation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslatedString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString::IsInitialized() const {
  
  for (int i = 0; i < translation_size(); i++) {
    if (!this->translation(i).IsInitialized()) return false;
  }
  return true;
}

void TranslatedString::Swap(TranslatedString* other) {
  if (other != this) {
    translation_.Swap(&other->translation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslatedString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslatedString_descriptor_;
  metadata.reflection = TranslatedString_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace transit_realtime

// @@protoc_insertion_point(global_scope)
