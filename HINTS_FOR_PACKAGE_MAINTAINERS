
First: Thanks for packaging :)
If there are any problems mail me at fpuelz@gmx.de or write a comment to the
publictransport page on kde-look.org.
Maybe you want to suggest changes in this document like new/better hints.

*******************************************************
*** Release branches **********************************
*******************************************************
  There are release branches beginning with the "0.9" release.
  To download a release branch from remote go to your cloned repository and type
     > git pull origin ${version_branch}
  This downloads the specified branch, eg. "git pull origin 0.10" for the 0.10 release branch.

  You can switch to the branch using
     > git branch ${version_branch}

  A future 0.11 or 1.0 release will get it's own release branch.
  The master branch should always be stable now, development happens in feature branches,
  which get merged to an integration branch and after testing into the master branch.
  More details at http://community.kde.org/KDE_Core/Platform_11/Git_Workflow.

  This way snapshots of the master branch should always be usable and stable and may of course
  contain some more features than the last release.
  Bugfixes will get backported to release branches where possible.

*******************************************************
*** Get version strings *******************************
*******************************************************
  You can checkout different (tagged) versions from the GIT repository.
  <VERSION> can be replaced with HEAD to get the current development version.

  To get a list of available versions (stable and unstable) you can use this command:
     > git ls-remote --tags git://anongit.kde.org/publictransport | sed -e 's:^.*refs/tags/\(.*\):\1:' -e '/^.*^{}.*$/ d'
  (the sed stuff only removes everything not neccessary, but can be left away)

  To get a list of available STABLE versions you can use this command:
     > git ls-remote --tags git://anongit.kde.org/publictransport stable* | sed -e 's:^.*refs/tags/\(.*\):\1:' -e '/^.*^{}.*$/ d'

  To get a list of available UNSTABLE versions you can use this command:
     > git ls-remote --tags git://anongit.kde.org/publictransport unstable* | sed -e 's:^.*refs/tags/\(.*\):\1:' -e '/^.*^{}.*$/ d'

  If you've cloned the repository, this simplifies to
     > git tag -l
     > git tag -l stable*
     > git tag -l unstable*

*******************************************************
*** Download into MULTIPLE TARBALLS *******************
*******************************************************
  - There's a handy script "packagers.sh" for that task
  - It will list available versions (tags) and then downloads tarballs for all
    components using the selected version
  - Tarball names can include versions and the tarballs can have a root directory
    (configurable by editing some variables in the script)

*******************************************************
*** Download a tarball with ALL components ************
*******************************************************
  - To download <VERSION> you can use this command (download in a tar archive):
     > git archive --format=tar --remote=git://anongit.kde.org/publictransport <VERSION> | gzip > publictransport_<VERSION>.tar.gz
  - To create a tarball with a root directory you can add the "--prefix=rootdir/"
    argument to git archive

*******************************************************
*** Download a tarball with a SINGLE component ********
*******************************************************
  - To only download a tarball for a single component (eg. the applet):
     > git archive --format=tar --prefix=plasma-applet-publictransport/ --remote=git://anongit.kde.org/publictransport <VERSION>:applet/ | gzip > plasma_applet_publictransport_<VERSION>.tar.gz
  - This gets only the applet and prefixes all files in it with
    "plasma-applet-publictransport/"
    (--prefix can be left away for no root directory in the tarball)

*******************************************************
*** Clone the GIT repository, checkout versions *******
*******************************************************
  - Clone ~= Download
  - You can clone the repository and then show the list of tagged versions
    manually and checkout the version you want:
     > git clone git://anongit.kde.org/publictransport
     > git branch -r              (lists all remote branches, eg. release and feature branches)
     > git pull origin <RELEASE>  (replace <RELEASE> with the release version to download, eg. "0.10")
     > git branch <RELEASE>       (go to that release branch)
     > git tag -l                 (prints out tagged versions)
     > git checkout <VERSION>     (loads the version associated with the given <VERSION>, eg. "unstable-0.10-rc1")

  - This way you can keep your local clone of the repository and checkout new
    tagged versions once they're available like this:
     > git branch <RELEASE> (go to a release branch, eg. "0.10")
     > git pull origin <RELEASE> (update the branch)
     > git checkout <VERSION> (like above)

  - To get a completely new release (not a patched version of the current release, eg. 0.10.2)
    repeat the steps above to download the new release branch, eg. "0.11".

*******************************************************
*** Get noticed about new versions ********************
*******************************************************
  - You can use this atom feed in your news reader (eg. akregator) to get
    noticed about new tagged version and other news about PublicTransport:
    https://projects.kde.org/projects/playground/base/publictransport/news.atom?key=6741b49ec02ce7cffaeaeb19973372ac87d62eeb.

*******************************************************
*** GIT repository structure **************************
*******************************************************
  The GIT repository contains multiple Plasma applets, data engines, a library and a
  developer tool. COPYING, AUTHOR, CHANGELOG files are included for each component.
  There's a global CMakeLists.txt after version 0.10 RC2 and everything can be build without having
  the library installed.
  The sources for each component are stored in these directories:

  - libpublictransporthelper
      Description: A library for easy configuration dialog creation for
        Plasma applets/runners using the publictransport data engine.

      Hint: This needs to be installed, before dependent components can be compiled.
      Dependent: plasma-applet-publictransport, plasma-applet-graphicaltimetableline,
        plasma-applet-flights, plasma-runner-publictransport, timetablemate

  - engine
      Description: A Plasma data engine that gets timetable information from
        service providers supported via scripts.

      Hint: On installation it creates relative symbolic links for default service
        providers of supported countries, eg. "de_default.xml" -> "de_db.xml".
        It requires Google Protocol Buffers for GTFS, libprotobuf, which needs pthread.
      Dependent: plasma-applet-publictransport, plasma-applet-graphicaltimetableline,
        plasma-applet-flights, plasma-runner-publictransport, timetablemate

  - engine/timetablemate
      Description: A little IDE to create new scripts for the publictransport
        Plasma data engine that adds support for new service providers.

      Hint: This can be used to create new scripts for the data engine,
        but isn't needed by end users, that aren't interested in that.
        It requires KWebkitPart, for compilation the headers are also required.
      Requires: libpublictransporthelper, plasma-engine-publictransport,
        publictransport-icons

  - engine-openstreetmap
      Description: A Plasma data engine that gets public transport stop names
        in a given area via OpenStreetMap or coordinates of a stop given by it's name.

      Hint: This engine is optional, but needed for actions "Show This Stop in a Map"
        (using marble). If this engine isn't installed, these actions are simply not shown.
        If there is GPS hardware, this engine can also be used to find stops near the users
        current position (used by libpublictransporthelper).

  - icons
      Description: Contains a public transport stop icon and several icons for
        vehicle types like trams, buses, trains.

      Hint: Used by plasma-applet-publictransport and plasma-applet-graphicaltimetableline
        for filter widgets.
        plasma-applet-publictransport and plasma-applet-graphicaltimetableline
        also use an SVG to draw vehicle type icons in the applet. In the
        configuration dialogs, the icons in this directory are used.

  - applet-publictransport
      Description: The main public transport Plasma applet showing
        departures/arrivals for given stops or journeys to/from another stop.

      Requires: libpublictransporthelper, plasma-engine-publictransport,
        publictransport-icons

  - applet-graphicaltimetableline
      Description: A Plasma applet with a graphical representation of the
        timetable for public transport at a given stop with a street
        on which vehicles are moving.

      Requires: libpublictransporthelper, plasma-engine-publictransport,
        publictransport-icons

  - applet-flights
      Description: A simple Plasma applet showing flight departures
        from a given airport.

      Hint: This applet only uses the international_flightstats.xml/.js files
        in the accessorInfos directory of plasma-engine-publictransport.
      Requires: libpublictransporthelper, plasma-engine-publictransport,
        publictransport-icons

  - runner
      Description: A runner that shows publictransport departures/arrivals/journeys.

      Requires: libpublictransporthelper, plasma-engine-publictransport,
        publictransport-icons
